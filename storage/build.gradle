/*
 * Copyright 2023 Aiven Oy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

subprojects { subproject ->
    tasks.register("validateDeps") {
        doLast {
            // Storage module deps versions
            def depVersions = [:]
            def runtimeClasspath = subproject.sourceSets.main.runtimeClasspath

            runtimeClasspath.each { file ->
                def fileName = file.name
                def matcher = fileName =~ /(.+)-(\d+\.\d+\.\d+(-.+)?)(\..+)/

                if (matcher) {
                    def artifactId = matcher[0][1]
                    def version = matcher[0][2]
                    depVersions[artifactId] = version
                }
            }

            // Validate transient dependencies between storage modules and core deps
            def coreDeps = [project(":core"), project(":commons")]
            def conflictsFound = false

            coreDeps.forEach { dep ->
                runtimeClasspath = dep.sourceSets.main.runtimeClasspath
                runtimeClasspath.each { file ->
                    def matcher = file.name =~ /(.+)-(\d+\.\d+\.\d+(-.+)?)(\..+)/

                    if (matcher) {
                        def artifactId = matcher[0][1]
                        def version = matcher[0][2]

                        if (depVersions.containsKey(artifactId)) {
                            if (depVersions[artifactId] != version) {
                                println "Conflict found for $artifactId: ${depVersions[artifactId]} vs $version"
                                conflictsFound = true
                            }
                        } else {
                            depVersions[artifactId] = version
                        }
                    }
                }
            }

            assert !conflictsFound: "Dependency conflicts found!"
        }
    }

    tasks.named("check") {
        dependsOn(tasks.named("validateDeps"))
    }
}
